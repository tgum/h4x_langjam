~ this is a comment
{
  this too is also
  a comment but it
  can spread over multiple
  lines as you can
  see (hopefully)
}

~ also you might want to experiment with the repl to test out the stuff

{ h4x (this language) is similar to lisp.
  so that means a lot of parentheses so be warned.
  everything is a value or a function (and functions are basically values)
  even operators are functions, to call a function
  just put in in parentheses with other values (optionally)
  like this:                                                     }
(print "print surprisingly prints text")
~ double quotes forever

{ then you can nest these function calls
  a program is just a bunch of nested function calls   }
(print (+ 1 2) )
~ the + operator is also a function


(define variable 43)
~ define creates a completely new and original (unlike this language)
~ variable in the scope its in

~ then you can just access it like in any other normal language
(print (- variable 1) )
~ OMG!!11!!1!!!! IT PRINTED 42

~ do creates a new scope where you can change variables independently of outside it
(do
  ~ but you can still access them in here if you don't change them
  (print variable) ~ this will print the one outside
  ~ define redefines it tho
  (define variable 1337) ~ now it creates one in this scope
  (print variable) ~ and it prints that one
)
~ outside of do the scope is boom destroyed kaput
~ so you have access to the old one
(print variable)

~ you can also not get the variable destroyed
(do
  (set variable 101) ~ set tries to set a variable in the closest outer scope
  (print variable)
)
(print variable) ~ it changed

~ if
(if true
  (print "if statements")
)

(if (= variable 100)
  ~ if true
  (print "this should not get executed")
  ~ if false
  (print "this is the else body")
)
~ there is no elif/else if.
~ you have to nest ifs
